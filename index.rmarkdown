---
title: "Weather Forcast!"
image: "noaa-Led9c1SSNFo-unsplash.jpg"
execute:
  echo: false
  warning: false
---

```{r}
knitr::include_graphics("noaa-Led9c1SSNFo-unsplash.jpg")
```



**Main Question: What Weather Will Tomorrow Bring?**

Importance: Knowing tomorrow's weather helps you plan your day efficiently, whether it's deciding what to wear, scheduling outdoor activities, or preparing for weather-related events. It provides essential information that impacts daily routines and ensures safety and comfort.


```{r}
#| echo: false
#| warning: false
#| message: false
#| include: false
library(tidyverse)
library(randomForest)
library(caret)
library(corrplot)
```

```{r}
#| echo: false
#| warning: false
#| message: false
#| include: false

df <- read_csv("data.csv")
df$time <- as.POSIXct(df$time, format = "%Y-%m-%d %H:%M:%S")
df <- df[, -10]

features <- select(df, -time)
labels <- df$temperature


set.seed(123)
train_indices <- createDataPartition(labels, p = 0.7, list = FALSE)
train_features <- features[train_indices, ]
train_labels <- labels[train_indices]
test_features <- features[-train_indices, ]
test_labels <- labels[-train_indices]

train <- data.frame(train_features, temperature = train_labels)


```

```{r}
#| echo: false
#| warning: false
#| message: false
#| include: false
train
```

```{r}
#| echo: false
#| warning: false
#| message: false
#| include: false
sum(is.na(train$particle1))

sum(is.na(train_labels))

sum(is.na(train_features))

```

```{r}
#| echo: false
#| warning: false
#| message: false
#| include: false
df$particle1[is.na(df$particle1)] <- mean(df$particle1, na.rm = TRUE)
df$particle2[is.na(df$particle2)] <- mean(df$particle2, na.rm = TRUE)
df$particle3[is.na(df$particle3)] <- mean(df$particle3, na.rm = TRUE)

train$particle1[is.na(train$particle1)] <- mean(train$particle1, na.rm = TRUE)
train$particle2[is.na(train$particle2)] <- mean(train$particle2, na.rm = TRUE)
train$particle3[is.na(train$particle3)] <- mean(train$particle3, na.rm = TRUE)


train_features$particle1[is.na(train_features$particle1)] <- mean(train_features$particle1, na.rm = TRUE)
train_features$particle2[is.na(train_features$particle2)] <- mean(train_features$particle2, na.rm = TRUE)
train_features$particle3[is.na(train_features$particle3)] <- mean(train_features$particle3, na.rm = TRUE)
```

```{r}
#| echo: false
#| warning: false
#| message: false
#| include: false
rf_model <- randomForest(train_labels ~ ., data = train_features, ntree = 500)

rf_model

```

```{r}
#| echo: false
#| warning: false
#| message: false
#| include: false
imporctance <- varImpPlot(rf_model)
```

```{r}
#| echo: false
#| warning: false
#| message: false
#| include: false
predictions <- predict(rf_model, newdata = test_features)

predictions[is.na(predictions)] <- mean(predictions, na.rm = TRUE)
```

```{r}
#| echo: false
#| warning: false
#| message: false
#| include: false
mae <- mean(abs(predictions - test_labels))
cat("Mean Absolute Error (MAE):", mae, "\n")

mape <- mean(abs(predictions - test_labels) / test_labels) * 100
accuracy <- 100 - mape
cat("Accuracy:", accuracy, "%\n")

```

```{r}
#| echo: false
#| warning: false
#| message: false
#| include: false
library(ggplot2)


plot_data <- data.frame(
  Actual = test_labels,
  Predicted = predictions
)


plot1 <- ggplot(plot_data, aes(x = Actual, y = Predicted)) +
  geom_point() +
  geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") + 
  labs(x = "Actual Temperature", y = "Predicted Temperature", title = "Actual vs. Predicted Temperature") +
  theme_minimal()

```

```{r}
#| echo: false
#| warning: false
#| message: false
#| include: false
plot2 <- ggplot(plot_data, aes(x = Actual, y = Actual - Predicted)) +
  geom_point() +
  labs(x = "Actual Temperature", y = "Residual", title = "Residual Plot")

```

```{r}

plot_data <- data.frame(
  Actual = test_labels,   
  Predicted = predictions 
)

plot_data$index <- seq_along(test_labels)

ggplot(plot_data, aes(x = index)) +
  geom_line(aes(y = Actual, color = "Actual")) + 
  geom_line(aes(y = Predicted, color = "Predicted")) +  
  scale_color_manual(name = "Series", values = c(Actual = "blue", Predicted = "red")) + 
  labs(x = "Size", y = "Temperature", title = "Actual vs. Predicted Temperature") + 
  theme_minimal()

```

